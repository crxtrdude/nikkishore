//==========================================================
// Nikki Shore
// QVN - Visual novel system
//
// Based on code by Ral22 (StoneshipMapper)
// http://forum.zdoom.org/viewtopic.php?f=37&t=38215&p=724983 
//
// Code by CRxTRDude.
//==========================================================

#library "qvn"
#include "zcommon.acs"
#import "qcommon.acs"
#import "qobjectives.acs"

// Everything here is defined in 640x480
// If you need recalc, just check template.

#define NAME_BOUNDX 7
#define NAME_BOUNDY 312
#define NAME_BOUNDW 149
#define NAME_BOUNDH 17

#define DIAL_BOUNDX 61
#define DIAL_BOUNDY 345
#define DIAL_BOUNDW	489
#define DIAL_BOUNDH 119

#define CTC_X		453.0
#define CTC_Y		358.0

#define TXTSPD 0.2 //Text Speed

global str 5:VN_name;
global str 6:VN_dialogue;
global str 7:VN_choice[];
global int 8:VN_CurrentChoice;
global int 9:VN_CurrentState; //0-defaultdialog, 1-radiodialog, 2-choice
//0-off, 1-on and initialize, 2-waiting for input

int isVNActive, isVNDisplayed;

int keypress = true;

Function void VN_Initialize (void){
	//Set all variables that the system uses
	VN_CurrentState = 0;
}

Script "VN_Update" (void){
	Log(s:"Waiting for key input ...");
	keypress = false;		
	ACS_NamedExecute("VN_KeyInput",0);
	ACS_NamedExecute("VN_CTCIcon",0);	
	Until(keypress==true){
		delay(1);
	}
	ACS_NamedTerminate("VN_KeyInput",0);
	ACS_NamedTerminate("VN_CTCIcon",0);
	keypress = false;
	terminate;
}

Script "VN_KeyInput" (void){
	log (s:"VN_KeyInput");
	int buttons;
  keypress = FALSE;
  
	if (VN_CurrentState == 0){		
		While(TRUE){
	      buttons = GetPlayerInput(-1, MODINPUT_BUTTONS);
	      If (buttons == BT_USE)
	      {
	          log(s:"Pressed Use");
	          keypress = TRUE;
	          break;
	      }
	      Else
	      {
	          keypress = FALSE;
	      }
	      Delay(1);
	  }
	}
}

Script "VN_CTCIcon" (void){
		//ClickToContinue Icon
		SetHudSize(512,386,1);
		SetFont("m_skull1");
		HudMessage(s:"A"; HUDMSG_PLAIN, 19, 0, CTC_X, CTC_Y, 0.0);
}

Script "VN_Parser" (int D){
	log (s:"VN_Parser");
	int lng = StrParam(l:D);
	str nm;
	str dialg;       
	int dialglen;
	if (!nm){
		nm = StrLeft(lng, 4);
    dialglen = StrLen(lng)-5;
		dialg = StrRight(lng, dialglen);		
	}
	if (nm == "_PLY") nm = "VNCH_PLYR";
	else nm = StrParam(s:"VNCH_",s:nm);
	
	log(s:"nm is ", s:nm);
	log(s:"dlalglen is ", i:dialglen);
	log(s:"dialg is", s:dialg);
	
	//VN_name - a language string grabbed from Language.vn
	VN_name = StrParam(s:nm);
	//VN_dialogue - a plain string grabbed from a language string
	//with the format VND_[Level]_[Dialog] found in Language.vn
	VN_dialogue = StrParam(s:dialg);
	//log(s:"VN_name = ", s:VN_name);
  //log(s:"VN_dialogue = ", s:VN_dialogue); 
}

Script "VN_DrawInit" (void){
		log (s:"VN_DrawInit");
		SetHudSize(640, 480, 1);
		If(VN_CurrentState == 1){
			//Radio, mini portraits, using font QPORTR Reason using font is it
			//could be translated (color) in HudMessage
			//See monalisa example
			//This also displays the 'Now Receiving' sign too
			
			log(s:"Displaying radio");
			SetFont("vn_rec");
			HudMessage(s:"A"; HUDMSG_PLAIN, 20, 0, 320.0, 240.0, 0.0);		
		}Else{
			//Dialog, full portraits. This could be just graphics
			//from the graphics folder.
			log(s:"Displaying default");
		}
		
		//Text box
		SetHudClipRect(0, 0, 0, 0, 0);
		SetHudSize(512,384,1);
					
		//BG			
		SetHudSize(640, 480, 1);
		SetFont("vn_intfc");
		HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ALPHA, 21, 0, 320.0, 240.0, 0.0, 0.8);

		//Text Elements
		SetFont("Smallfont");			
		//'Speaking'
		HudMessage(s:"S P E A K I N G  ..."; HUDMSG_PLAIN, 17, CR_WHITE, 550.0, 320.0, 0.0);
		terminate;
}

Script "VN_DrawText" (int text){
		//Parse the text first before drawing.
		ACS_NamedExecuteWait("VN_Parser",0,text);
		
		log (s:"VN_DrawText");
		int namex = 82.0;
		int namey = 320.0;
		int dialogx = 63.1;
		int dialogy = 344.1;
		SetHudSize(640, 480, 1);
		HudMessage(s:""; HUDMSG_PLAIN,14,0,0.0,0.0,0.0);
		HudMessage(s:""; HUDMSG_PLAIN,18,0,0.0,0.0,0.0);
		
		//log(s:"VN_name = ", s:VN_name);
		//log(s:"VN_dialogue = ", s:VN_dialogue);
		 
		SetFont("Bigfont");
		//Name
		SetHudClipRect(NAME_BOUNDX, NAME_BOUNDY, NAME_BOUNDW, NAME_BOUNDH, NAME_BOUNDW);
		HudMessage(l:VN_name; HUDMSG_PLAIN, 14, CR_WHITE, namex, namey, 0.0);
		//Dialog
		SetHudClipRect(DIAL_BOUNDX, DIAL_BOUNDY, DIAL_BOUNDW, DIAL_BOUNDH, DIAL_BOUNDW);
		HudMessage(s:VN_dialogue; HUDMSG_PLAIN, 18, CR_WHITE, dialogx, dialogy, 0.0);
    terminate;
}

Script "VN_DrawPortrait" (int typ, int Po){
	log (s:"VN_DrawPortrait");
  //NOTE: CALL ONLY if you need to overdraw a portrait!
  str inittext = StrParam(s:Po);
  log(s:inittext);
  str po1, po2, po3;
  str synt = StrParam(l:inittext);
  SetHudSize(640,480,1);
  HudMessage(s:""; HUDMSG_PLAIN,22,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,23,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,24,0,0.0,0.0,0.0);  
  if (typ == 1){
    //Radio
  }else{
    //default
    //parse what portraits to flash
    if(!po1){
      po1 = StrParam(s:"P_",s:StrMid(synt,0,5));
      po2 = StrParam(s:"P_",s:StrMid(synt,6,5));
      po3 = StrParam(s:"P_",s:StrMid(synt,12,5));
    }
    log(s:"po1 ",s:po1);
    log(s:"po2 ",s:po2);
    log(s:"po3 ",s:po3);
    //check if portraits exist starting with 3rd portrait.
    if (po3 != "P_NONE0"){
      log(s:"There are 3 portraits.");
      SetFont(po1);
      HudMessage(s:"A";  HUDMSG_PLAIN, 22, CR_WHITE, 140.0, 240.0, 0.0);
      SetFont(po2);
      HudMessage(s:"A";  HUDMSG_PLAIN, 23, CR_WHITE, 310.0, 240.0, 0.0);
      SetFont(po3);
      HudMessage(s:"A";  HUDMSG_PLAIN, 24, CR_WHITE, 510.0, 240.0, 0.0);      
    }else if (po2 != "P_NONE0" && po3 == "P_NONE0"){
      log(s:"There are 2 portraits.");
      SetFont(po1);
      HudMessage(s:"A";  HUDMSG_PLAIN, 22, CR_WHITE, 200.0, 240.0, 0.0);
      SetFont(po2);
      HudMessage(s:"A";  HUDMSG_PLAIN, 23, CR_WHITE, 420.0, 240.0, 0.0);
    }else{
      log(s:"There is a single portrait.");
      SetFont(po1);
      HudMessage(s:"A";  HUDMSG_PLAIN, 22, CR_WHITE, 320.0, 240.0, 0.0);
    }     
  }
  terminate;
}

Function void VN_Show (int stat){
	VN_CurrentState = stat;
	Q_Pause(player, True);			
	GiveInventory("NoWeapon",1);
	SetWeapon("NoWeapon");
	OBJ_Disable(true);
	ACS_NamedExecute("VN_DrawInit",0);                
}

Function void VN_TypeDialogue (int dtx){
	str t = StrParam(s:dtx);
	ACS_NamedExecute("VN_DrawText",0,t);	
}

Function void VN_ShowPortrait (int p){
	str t = StrParam(s:p);
	ACS_NamedExecute("VN_DrawPortrait",0,VN_CurrentState,t);
}

//Function void VN_Choice(int choice1, int choice2, int choice3, int default){
//
//}

Script "VN_Stop" (void){
	ACS_NamedTerminate("VN_KeyInput",0);
	ACS_NamedTerminate("VN_DrawInit",0);	
	HudMessage(s:""; HUDMSG_PLAIN,11,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,12,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,13,0,0.0,0.0,0.0);
	HudMessage(s:""; HUDMSG_PLAIN,14,0,0.0,0.0,0.0);
	
	HudMessage(s:""; HUDMSG_PLAIN,17,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,18,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,19,0,0.0,0.0,0.0);
	HudMessage(s:""; HUDMSG_PLAIN,20,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,21,0,0.0,0.0,0.0);
	HudMessage(s:""; HUDMSG_PLAIN,22,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,23,0,0.0,0.0,0.0);
  HudMessage(s:""; HUDMSG_PLAIN,24,0,0.0,0.0,0.0);
	TakeInventory("NoWeapon",0x7fffffff);
	Q_Pause(player, False);
	OBJ_Disable(false);
}